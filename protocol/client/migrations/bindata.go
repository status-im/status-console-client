// Code generated by go-bindata.
// sources:
// 000001_add_messages_contacts.down.db.sql
// 000001_add_messages_contacts.up.db.sql
// doc.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_add_messages_contactsDownDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xce\x48\x2c\x29\xb6\xe6\x42\x12\x29\x2d\x4e\x2d\x8a\xcf\x4d\x2d\x2e\x4e\x4c\x4f\x45\x95\xc9\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\x88\x2f\x2d\x48\x49\x2c\x41\x93\x06\x19\x15\x0f\x55\x63\xcd\xc5\x05\x08\x00\x00\xff\xff\x49\xbe\x78\x25\x65\x00\x00\x00")

func _000001_add_messages_contactsDownDbSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_messages_contactsDownDbSql,
		"000001_add_messages_contacts.down.db.sql",
	)
}

func _000001_add_messages_contactsDownDbSql() (*asset, error) {
	bytes, err := _000001_add_messages_contactsDownDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_messages_contacts.down.db.sql", size: 101, mode: os.FileMode(420), modTime: time.Unix(1562751645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_add_messages_contactsUpDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\x16\xe8\x21\x11\xa0\x43\x7b\x28\x5a\x20\x27\xda\x5e\x27\x44\x65\x2a\xa5\xa9\xc6\x39\x11\x8c\xc8\xc6\x6a\xf4\x82\x45\xb9\xcd\xdf\x17\xd6\xc3\x96\xab\xd8\x71\xaf\xcb\x99\xe5\xec\x70\x96\x53\x81\x54\x22\x48\x3a\x09\x10\xd8\x1c\x78\x28\x01\x57\x6c\x29\x97\x10\xaf\xb5\xab\xe0\x9a\x24\x06\x7e\x50\x31\xbd\xa3\x02\xee\x05\x5b\x50\xf1\x08\xdf\xf0\xb1\x41\xf2\x28\x08\x7c\x92\xeb\xcc\xee\x21\x87\x72\x5c\xa4\xc5\x66\x54\x87\x19\xce\x69\x14\x48\xb8\xfa\xa0\x3f\x7d\xfd\x62\x3e\x5f\xf9\xc4\xbd\x96\x16\x18\x97\x03\xb2\x8e\x5d\xb2\xb5\x30\x09\xc3\x00\x29\x1f\xb3\xa5\x88\xd0\x27\x2e\xc9\x6c\xe5\x74\x56\xc2\x8c\x4a\x94\x6c\x81\x63\xe4\x34\x12\x02\xb9\x54\xbb\xd3\xa5\xa4\x8b\x7b\x9f\xd4\xa5\xd1\xce\x1a\xa5\xdd\xff\xf1\x8c\x4d\x6d\xcb\x53\x71\x5a\xc4\x2f\x6a\xab\xd3\xfa\x58\xf9\x9e\xfe\xd1\x27\x65\xfd\x94\x26\xb1\x7a\xb1\xaf\x30\x09\xc2\x89\x4f\xea\x7c\x9b\xd8\xdf\xd6\xa8\xcc\x56\x95\x7e\xb6\x2a\x2e\xea\xdc\x9d\xe4\xa7\xba\xba\xec\xa2\x06\x78\xe8\x99\x3b\x9b\x3b\xd5\x98\xda\xb9\xff\x36\xa4\x3f\x25\x1e\x3c\x30\x79\x17\x46\x12\x44\xf8\xc0\x66\x37\x84\x9c\x89\x45\x5d\xd9\x4d\xdf\xa9\x8b\xc7\x6e\x3a\x88\x38\xfb\x1e\xe1\xf0\xfd\xd7\xda\xa9\x41\x78\x86\xc9\x78\x4b\x62\xaf\xee\xb8\xea\xec\x1f\x07\x12\x57\xd2\x27\x8d\x15\x30\x61\xb7\x8c\xcb\xe1\xdb\xf7\x95\xbe\x6d\x7f\x71\xc7\xea\x2f\x3b\x34\x1a\x3d\xcc\xcf\x54\x3f\x57\x27\xec\x25\xde\xc1\x0f\xc6\x67\xb8\x82\xae\x7f\x05\x21\x3f\x76\xe3\xba\x3b\xf1\xce\x3b\x98\xd9\xec\xc9\x6e\xaa\x75\x52\xaa\x36\x89\x3b\x1b\x01\xde\xdd\x33\x00\xa3\x9d\x6e\xdd\x1e\x56\x4f\x1b\x0d\x30\x0f\x05\xb2\x5b\xde\x74\xda\xcb\x03\x81\x73\x14\xc8\xa7\xd8\x6d\xf9\x75\x62\x3c\x02\x30\xce\x01\xc0\x3b\x1f\x84\xea\x86\x69\x26\x00\xf8\xc7\xd9\x23\x29\xe7\x85\x02\x68\x93\x25\xf9\xe9\x8d\x9f\xd3\x60\x89\x2d\xf2\x57\x91\xe4\xd6\x5c\x04\xbd\x7c\xfe\x16\xdf\xa6\xb8\x47\xfa\x83\x81\x3c\xef\x86\xfc\x0d\x00\x00\xff\xff\xb2\xa0\x14\x27\x2e\x05\x00\x00")

func _000001_add_messages_contactsUpDbSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_add_messages_contactsUpDbSql,
		"000001_add_messages_contacts.up.db.sql",
	)
}

func _000001_add_messages_contactsUpDbSql() (*asset, error) {
	bytes, err := _000001_add_messages_contactsUpDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_add_messages_contacts.up.db.sql", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1562751940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x0d\xc4\x20\x0c\x05\xd0\x9e\x29\xfe\x02\xd8\xfd\x6d\xe3\x4b\xac\x2f\x44\x82\x09\x78\x7f\xa5\x49\xfd\xa6\x1d\xdd\xe8\xd8\xcf\x55\x8a\x2a\xe3\x47\x1f\xbe\x2c\x1d\x8c\xfa\x6f\xe3\xb4\x34\xd4\xd9\x89\xbb\x71\x59\xb6\x18\x1b\x35\x20\xa2\x9f\x0a\x03\xa2\xe5\x0d\x00\x00\xff\xff\x60\xcd\x06\xbe\x4a\x00\x00\x00")

func docGoBytes() ([]byte, error) {
	return bindataRead(
		_docGo,
		"doc.go",
	)
}

func docGo() (*asset, error) {
	bytes, err := docGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc.go", size: 74, mode: os.FileMode(420), modTime: time.Unix(1562307822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_add_messages_contacts.down.db.sql": _000001_add_messages_contactsDownDbSql,
	"000001_add_messages_contacts.up.db.sql": _000001_add_messages_contactsUpDbSql,
	"doc.go": docGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_add_messages_contacts.down.db.sql": &bintree{_000001_add_messages_contactsDownDbSql, map[string]*bintree{}},
	"000001_add_messages_contacts.up.db.sql": &bintree{_000001_add_messages_contactsUpDbSql, map[string]*bintree{}},
	"doc.go": &bintree{docGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

