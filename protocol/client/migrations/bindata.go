// Code generated by go-bindata.
// sources:
// 0001_add_messages_contacts.down.db.sql
// 0001_add_messages_contacts.up.db.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_add_messages_contactsDownDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x8a\xcf\x4d\x2d\x2e\x4e\x4c\x4f\x2d\xb6\xe6\x42\x97\x49\xce\xcf\x2b\x49\x4c\x2e\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xe3\x7e\xc7\x78\x34\x00\x00\x00")

func _0001_add_messages_contactsDownDbSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_add_messages_contactsDownDbSql,
		"0001_add_messages_contacts.down.db.sql",
	)
}

func _0001_add_messages_contactsDownDbSql() (*asset, error) {
	bytes, err := _0001_add_messages_contactsDownDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_add_messages_contacts.down.db.sql", size: 52, mode: os.FileMode(436), modTime: time.Unix(1557209711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0001_add_messages_contactsUpDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x41\x4e\xc3\x30\x10\xbc\xfb\x15\x7b\x04\x29\x3f\xe0\xe4\x14\x43\x57\x04\x1b\xb9\x5b\xda\x9e\x2c\x63\x56\x10\xb5\x4e\x23\xbc\x95\xe8\xef\x91\xa2\x04\x0a\x42\x6a\xaf\x33\x3b\x33\x3b\x33\xf3\x46\x93\x01\xd2\x75\x63\x00\xef\xc0\x3a\x02\xb3\xc6\x05\x2d\xe0\x50\xf8\x23\x64\x2e\x25\xbe\x71\x81\x2b\xd5\xbe\xc2\xb3\xf6\xb3\xb9\xf6\xf0\xe4\xf1\x51\xfb\x0d\x3c\x98\xcd\xa0\xb0\xcb\xa6\xa9\x54\xda\x77\x12\x93\x84\x93\xc3\xdf\x24\x77\x12\xe4\xd8\xf3\x44\x57\x6a\xb4\xff\x83\x0a\x7f\x0a\x90\x59\x53\xa5\xd2\x6e\x9f\xb6\x50\xe3\x3d\x5a\xaa\x94\xb4\x99\x8b\xc4\xdc\x7f\x23\x93\x6d\x7a\x8f\x43\xf0\xa8\x9a\xc2\x7e\x8c\xfa\xc3\xcb\xae\x4d\x61\xcb\x47\xa8\x1b\x57\xab\x6b\x58\x21\xcd\xdd\x92\xc0\xbb\x15\xde\xde\xa8\x73\x4b\x8c\xed\x2e\x5a\xa2\x8b\x99\xff\xd9\x60\x68\x89\x96\x4e\xa0\xb3\x6f\x7d\x05\x00\x00\xff\xff\xa2\x0f\x9e\x58\xa1\x01\x00\x00")

func _0001_add_messages_contactsUpDbSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_add_messages_contactsUpDbSql,
		"0001_add_messages_contacts.up.db.sql",
	)
}

func _0001_add_messages_contactsUpDbSql() (*asset, error) {
	bytes, err := _0001_add_messages_contactsUpDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_add_messages_contacts.up.db.sql", size: 417, mode: os.FileMode(436), modTime: time.Unix(1557209711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_add_messages_contacts.down.db.sql": _0001_add_messages_contactsDownDbSql,
	"0001_add_messages_contacts.up.db.sql": _0001_add_messages_contactsUpDbSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_add_messages_contacts.down.db.sql": &bintree{_0001_add_messages_contactsDownDbSql, map[string]*bintree{}},
	"0001_add_messages_contacts.up.db.sql": &bintree{_0001_add_messages_contactsUpDbSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

