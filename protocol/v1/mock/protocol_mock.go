// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/status-console-client/protocol/v1 (interfaces: Protocol)

// Package protocol_mock is a generated GoMock package.
package protocol_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	subscription "github.com/status-im/status-console-client/protocol/subscription"
	v1 "github.com/status-im/status-console-client/protocol/v1"
	filter "github.com/status-im/status-go/messaging/filter"
	multidevice "github.com/status-im/status-go/messaging/multidevice"
	reflect "reflect"
)

// MockProtocol is a mock of Protocol interface
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// GetMessagesChan mocks base method
func (m *MockProtocol) GetMessagesChan() chan *v1.ReceivedMessages {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesChan")
	ret0, _ := ret[0].(chan *v1.ReceivedMessages)
	return ret0
}

// GetMessagesChan indicates an expected call of GetMessagesChan
func (mr *MockProtocolMockRecorder) GetMessagesChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesChan", reflect.TypeOf((*MockProtocol)(nil).GetMessagesChan))
}

// LoadChats mocks base method
func (m *MockProtocol) LoadChats(arg0 context.Context, arg1 []v1.ChatOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadChats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadChats indicates an expected call of LoadChats
func (mr *MockProtocolMockRecorder) LoadChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChats", reflect.TypeOf((*MockProtocol)(nil).LoadChats), arg0, arg1)
}

// OnNewMessages mocks base method
func (m *MockProtocol) OnNewMessages(arg0 []*filter.Messages) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewMessages", arg0)
}

// OnNewMessages indicates an expected call of OnNewMessages
func (mr *MockProtocolMockRecorder) OnNewMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewMessages", reflect.TypeOf((*MockProtocol)(nil).OnNewMessages), arg0)
}

// RemoveChats mocks base method
func (m *MockProtocol) RemoveChats(arg0 context.Context, arg1 []v1.ChatOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveChats indicates an expected call of RemoveChats
func (mr *MockProtocolMockRecorder) RemoveChats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChats", reflect.TypeOf((*MockProtocol)(nil).RemoveChats), arg0, arg1)
}

// Request mocks base method
func (m *MockProtocol) Request(arg0 context.Context, arg1 v1.RequestOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockProtocolMockRecorder) Request(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockProtocol)(nil).Request), arg0, arg1)
}

// Send mocks base method
func (m *MockProtocol) Send(arg0 context.Context, arg1 []byte, arg2 v1.SendOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockProtocolMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProtocol)(nil).Send), arg0, arg1, arg2)
}

// SetInstallationMetadata mocks base method
func (m *MockProtocol) SetInstallationMetadata(arg0 context.Context, arg1 string, arg2 *multidevice.InstallationMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstallationMetadata", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstallationMetadata indicates an expected call of SetInstallationMetadata
func (mr *MockProtocolMockRecorder) SetInstallationMetadata(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstallationMetadata", reflect.TypeOf((*MockProtocol)(nil).SetInstallationMetadata), arg0, arg1, arg2)
}

// Subscribe mocks base method
func (m *MockProtocol) Subscribe(arg0 context.Context, arg1 chan *v1.StatusMessage, arg2 v1.SubscribeOptions) (*subscription.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(*subscription.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockProtocolMockRecorder) Subscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockProtocol)(nil).Subscribe), arg0, arg1, arg2)
}
