// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/status-im/status-console-client/protocol/transport (interfaces: WhisperTransport)

// Package transport_mock is a generated GoMock package.
package transport_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	subscription "github.com/status-im/status-console-client/protocol/subscription"
	transport "github.com/status-im/status-console-client/protocol/transport"
	whisperv6 "github.com/status-im/whisper/whisperv6"
	reflect "reflect"
)

// MockWhisperTransport is a mock of WhisperTransport interface
type MockWhisperTransport struct {
	ctrl     *gomock.Controller
	recorder *MockWhisperTransportMockRecorder
}

// MockWhisperTransportMockRecorder is the mock recorder for MockWhisperTransport
type MockWhisperTransportMockRecorder struct {
	mock *MockWhisperTransport
}

// NewMockWhisperTransport creates a new mock instance
func NewMockWhisperTransport(ctrl *gomock.Controller) *MockWhisperTransport {
	mock := &MockWhisperTransport{ctrl: ctrl}
	mock.recorder = &MockWhisperTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWhisperTransport) EXPECT() *MockWhisperTransportMockRecorder {
	return m.recorder
}

// KeysManager mocks base method
func (m *MockWhisperTransport) KeysManager() *transport.WhisperServiceKeysManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeysManager")
	ret0, _ := ret[0].(*transport.WhisperServiceKeysManager)
	return ret0
}

// KeysManager indicates an expected call of KeysManager
func (mr *MockWhisperTransportMockRecorder) KeysManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeysManager", reflect.TypeOf((*MockWhisperTransport)(nil).KeysManager))
}

// Request mocks base method
func (m *MockWhisperTransport) Request(arg0 context.Context, arg1 transport.RequestOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockWhisperTransportMockRecorder) Request(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockWhisperTransport)(nil).Request), arg0, arg1)
}

// Send mocks base method
func (m *MockWhisperTransport) Send(arg0 context.Context, arg1 whisperv6.NewMessage) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockWhisperTransportMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWhisperTransport)(nil).Send), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockWhisperTransport) Subscribe(arg0 context.Context, arg1 chan<- *whisperv6.ReceivedMessage, arg2 *whisperv6.Filter) (*subscription.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(*subscription.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockWhisperTransportMockRecorder) Subscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockWhisperTransport)(nil).Subscribe), arg0, arg1, arg2)
}
